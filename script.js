
    $(document).ready(function() {
  
      const questionMapping = {
        1946: "Largest Number After Mutating Substring",
        1945: "Sum of Digits of String After Convert",
        1935: "Maximum Number of Words You Can Type",
        1884: "Egg Drop With 2 Eggs and N Floors",
        1882: "Process Tasks Using Servers",
        1881: "Maximum Value after Insertion",
        1880: "Check if Word Equals Summation of Two Words",
        1877: "Minimize Maximum Pair Sum in Array",
        1876: "Substrings of Size Three with Distinct Characters",
        1871: "Jump Game VII",
        1870: "Minimum Speed to Arrive on Time",
        1869: "Longer Contiguous Segments of Ones than Zeros",
        1862: "Sum of Floored Pairs",
        1861: "Rotating the Box",
        1860: "Incremental Memory Leak",
        1859: "Sorting the Sentence",
        1857: "Largest Color Value in a Directed Graph",
        1856: "Maximum Subarray Min-Product",
        1855: "Maximum Distance Between a Pair of Values",
        1854: "Maximum Population Year",
        1851: "Minimum Interval to Include Each Query",
        1850: "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        1849: "Splitting a String Into Descending Consecutive Values",
        1848: "Minimum Distance to the Target Element",
        1847: "Closest Room",
        1846: "Maximum Element After Decreasing and Rearranging",
        1845: "Seat Reservation Manager",
        1844: "Replace All Digits with Characters",
        1840: "Maximum Building Height",
        1839: "Longest Substring Of All Vowels in Order",
        1838: "Frequency of the Most Frequent Element",
        1837: "Sum of Digits in Base K",
        1835: "Find XOR Sum of All Pairs Bitwise AND",
        1834: "Single-Threaded CPU",
        1833: "Maximum Ice Cream Bars",
        1832: "Check if the Sentence Is Pangram",    
        1829: "Maximum XOR for Each Query",
        1828: "Queries on Number of Points Inside a Circle",
        1827: "Minimum Operations to Make the Array Increasing",
        1825: "Finding MK Average",
        1824: "Minimum Sideway Jumps",
        1823: "Find the Winner of the Circular Game",
        1822: "Sign of the Product of an Array",
        1819: "Number of Different Subsequences GCDs",
        1818: "Minimum Absolute Sum Difference",
        1817: "Finding the Users Active Minutes",
        1816: "Truncate Sentence",
        1815: "Maximum Number of Groups Getting Fresh Donuts",
        1814: "Count Nice Pairs in an Array",
        1813: "Sentence Similarity III",
        1812: "Determine Color of a Chessboard Square",
        1808: "Maximize Number of Nice Divisors",
        1807: "Evaluate the Bracket Pairs of a String",
        1806: "Minimum Number of Operations to Reinitialize a Permutation",
        1805: "Number of Different Integers in a String",
        1803: "Count Pairs With XOR in a Range",
        1802: "Maximum Value at a Given Index in a Bounded Array",
        1801: "Number of Orders in the Backlog",
        1800: "Maximum Ascending Subarray Sum",
        1799: "Maximize Score After N Operations",
        1798: "Maximum Number of Consecutive Values You Can Make",
        1797: "Design Authentication Manager",
        1796: "Second Largest Digit in a String",
        1793: "Maximum Score of a Good Subarray",
        1792: "Maximum Average Pass Ratio",
        1791: "Find Center of Star Graph",
        1790: "Check if One String Swap Can Make Strings Equal",
        1787: "Make the XOR of All Segments Equal to Zero",
        1786: "Number of Restricted Paths From First to Last Node",
        1785: "Minimum Elements to Add to Form a Given Sum",
        1784: "Check if Binary String Has at Most One Segment of Ones",
        1782: "Count Pairs Of Nodes",
        1781: "Sum of Beauty of All Substrings",
        1780: "Check if Number is a Sum of Powers of Three",
        1779: "Find Nearest Point That Has the Same X or Y Coordinate",
        1775: "Equal Sum Arrays With Minimum Number of Operations",
        1774: "Closest Dessert Cost",
        1773: "Count Items Matching a Rule",
        1771: "Maximize Palindrome Length From Subsequences",    
        1770: "Maximum Score from Performing Multiplication Operations",
        1769: "Minimum Number of Operations to Move All Balls to Each Box",
        1768: "Merge Strings Alternately",
        1766: "Tree of Coprimes",
        1765: "Map of Highest Peak",
        1764: "Form Array by Concatenating Subarrays of Another Array",
        1763: "Longest Nice Substring",
        1761: "Minimum Degree of a Connected Trio in a Graph",
        1760: "Minimum Limit of Balls in a Bag",
        1759: "Count Number of Homogenous Substrings",
        1758: "Minimum Changes To Make Alternating Binary String",
        1755: "Closest Subsequence Sum",
        1754: "Largest Merge Of Two Strings",
        1753: "Maximum Score From Removing Stones",
        1752: "Check if Array Is Sorted and Rotated",
        1751: "Maximum Number of Events That Can Be Attended II",
        1750: "Minimum Length of String After Deleting Similar Ends",
        1749: "Maximum Absolute Sum of Any Subarray",
        1748: "Sum of Unique Elements",
        1743: "Restore the Array From Adjacent Pairs",
        1742: "Maximum Number of Balls in a Box",
        1739: "Building Boxes",
        1738: "Find Kth Largest XOR Coordinate Value",
        1736: "Latest Time by Replacing Hidden Digits",
        1734: "Decode XORed Permutation",
        1733: "Minimum Number of People to Teach",
        1732: "Find the Highest Altitude",
        1727: "Largest Submatrix With Rearrangements",
        1726: "Tuple with Same Product",
        1725: "Number Of Rectangles That Can Form The Largest Square",
        1718: "Construct the Lexicographically Largest Valid Sequence",
        1717: "Maximum Score From Removing Substrings",
        1716: "Calculate Money in Leetcode Bank",
        1712: "Ways to Split Array Into Three Subarrays",
        1711: "Count Good Meals",
        1710: "Maximum Units on a Truck",
        1700: "Number of Students Unable to Eat Lunch",
        1695: "Maximum Erasure Value",
        1694: "Reformat Phone Number",
        1625: "Lexicographically Smallest String After Applying Operations",
        1624: "Largest Substring Between Two Equal Characters",
        1605: "Find Valid Matrix Given Row and Column Sums",
        1573: "Number of Ways to Split a String",
        1556: "Thousand Separator",
        1551: "Minimum Operations to Make Array Equal",
        1550: "Three Consecutive Odds",
        1541: "Minimum Insertions to Balance a Parentheses String",
        1535: "Find the Winner of an Array Game",
        1529: "Bulb Switcher IV",
        1528: "Shuffle String",
        1525: "Number of Good Ways to Split a String",
        1524: "Number of Sub-arrays With Odd Sum",
        1523: "Count Odd Numbers in an Interval Range",
        1513: "Number of Substrings With Only 1s",
        1470: "Shuffle the Array",
        1464: "Maximum Product of Two Elements in an Array",
        1460: "Make Two Arrays Equal by Reversing Sub-arrays",
        1376: "Time Needed to Inform All Employees",
        1375: "Bulb Switcher III",
        1353: "Maximum Number of Events That Can Be Attended",
        1333: "Filter Restaurants by Vegan-Friendly, Price and Distance",
        1207: "Unique Number of Occurrences",
        1170: "Compare Strings by Frequency of the Smallest Character",
        1071: "Greatest Common Divisor of Strings",
        1030: "Matrix Cells in Distance Order",
        1029: "Two City Scheduling",
        1028: "Recover a Tree From Preorder Traversal",
        1024: "Video Stitching",
        993: "Cousins in Binary Tree",
        991: "Broken Calculator",     
        990: "Satisfiability of Equality Equations",
        989: "Add to Array-Form of Integer",
        988: "Smallest String Starting From Leaf",
        987: "Vertical Order Traversal of a Binary Tree",
        986: "Interval List Intersections",
        985: "Sum of Even Numbers After Queries",
        984: "String Without AAA or BBB",
        983: "Minimum Cost For Tickets",
        982: "Triples with Bitwise AND Equal To Zero",
        981: "Time Based Key-Value Store",
        980: "Unique Paths III",
        979: "Distribute Coins in Binary Tree",
        978: "Longest Turbulent Subarray",
        977: "Squares of a Sorted Array",
        976: "Largest Perimeter Triangle",
        971: "Flip Binary Tree To Match Preorder Traversal",
        969: "Pancake Sorting",
        961: "N-Repeated element in size 2N Array",
        958: "Check Completeness of a Binary Tree",
        951: "Flip Equivalent Binary Trees",
        950: "Reveal Cards In Increasing Order",
        941: "Valid Mountain Array",
        933: "Number of Recent Calls",
        931: "Minimum Falling Path Sum",
        929: "Unique Email Addresses",
        922: "Sort Array By Parity II",
        914: "X of a Kind in a Deck of Cards",
        905: "Sort Array By Parity",
        876: "Middle of the Linked List",
        859: "Buddy Strings",
        858: "Mirror Reflection",
        852: "Peak Index in a Mountain Array",
        849: "Maximize Distance to Closest Person",
        844: "Backspace String Compare",
        837: "Most Common Word",
        830: "Positions of Large Groups",
        820: "Short Encoding of Words",
        804: "Unique Morse Code Words",
        776: "Swim In Rising Water",
        771: "Jewels and Stones",
        747: "Largest Number At Least Twice of Others",
        746: "Min Cost Climbing Stairs",
        721: "Accounts Merge",
        717: "1-bit and 2-bit Characters",
        714: "Best Time to Buy and Sell Stock with Transaction Fee",
        712: "Minimum ASCII Delete Sum for Two Strings",
        695: "Max Area of Island",
        687: "Longest Univalue Path",
        684: "Redundant Connection",
        674: "Longest Continuous Increasing Subsequence",
        672: "Bulb Switcher II",
        671: "Second Minimum Node In a Binary Tree",
        665: "Non-decreasing Array",
        662: "Maximum Width of Binary Tree",
        661: "Image Smoother",
        655: "Print Binary Tree",
        652: "Find Duplicate Subtrees",
        647: "Palindromic Substrings",
        643: "Maximum Average Subarray I",
        628: "Maximum Product of Three Numbers",
        623: "Add One Row to Tree",
        581: "Shortest Unsorted Continuous Subarray",
        572: "Subtree of Another Tree",
        563: "Binary Tree Tilt",
        547: "Friend Circles",
        543: "Diameter of Binary Tree",
        538: "Convert BST to Greater Tree",
        532: "K-diff Pairs in an Array",
        520: "Detect Capital",
        518: "Coin Change 2",
        516: "Longest Palindromic Subsequence",
        509: "Fibonacci Number",
        497: "Random Point in Non-overlapping Rectangles",
        494: "Target Sum",
        477: "Total Hamming Distance",
        463: "Island Perimeter",
        450: "DeleteNodeInABST",
        449: "Serialize and Deserialize BST",
        438: "Find all Anagrams in a string",
        437: "Path Sum III",
        418: "Sentence Screen Fitting",
        416: "Partition Equal Subset Sum",
        415: "Add Strings",
        414: "Third Maximum Number",
        413: "Arithmetic Slices",
        412: "Fizz Buzz",
        410: "Split Array Largest Sum",
        409: "Longest Palindrome",
        406: "Queue Reconstruction by Height",
        405: "Convert a Number to Hexadecimal",
        401: "Binary Watch",
        399: "Evaluate Division",
        387: "First Unique Character in a String",
        387: "First Unique Character in a String",
        376: "Wiggle Subsequence",
        375: "Guess Number Higher or Lower II",
        374: "Guess Number Higher or Lower",
        373: "Find K Pairs with Smallest Sums",
        371: "Sum of Two Integers",
        370: "Range Addition",
        369: "Plus One Linked List",
        368: "Largest Divisible Subset",
        367: "Perfect Square",
        365: "Water and Jug Problem",
        364: "Nested List Weight Sum II",
        363: "Max Sum of Rectangle No Larger Than K", 
        361: "Bomb Enemy",
        360: "Sort Transformed Array",
        358: "Rearrange String k Distance Apart",
        357: "Count Numbers with Unique Digits",
        356: "Line Reflection",
        354: "Russian Doll Envelopes",
        353: "Design Snake Game",
        352: "Data Stream as Disjoint Intervals",
        351: "Android Unlock Patterns",
        350: "Intersection of Two Arrays II",
        349: "Intersection of Two Arrays",
        348: "Design Tic-Tac-Toe",
        347: "Top K Frequent Elements",
        346: "Moving Average from Data Stream",
        345: "Reverse Vowels of a String",
        344: "Reverse String",
        343: "Integer Break",
        342: "Power of Four",
        341: "Flatten Nested List Iterator",
        340: "Longest Substring with At Most K Distinct Characters",
        339: "Nested List Weight Sum",
        338: "Counting Bits",
        337: "House Robber III",
        336: "Palindrome Pairs",
        335: "Self Crossing",
        334: "Increasing Triplet Subsequence",
        333: "Largest BST Subtree",
        332: "Reconstruct Itinerary",
        331: "Verify Preorder Serialization of a Binary Tree",
        330: "Patching Array",
        329: "Longest Increasing Path in a Matrix",
        328: "Odd Even Linked List",
        327: "Count of Range Sum",
        326: "Power of Three",
        325: "Maximum Size Subarray Sum Equals k",
        324: "Wiggle Sort II",
        323: "Number of Connected Components in an Undirected Graph",
        322: "Coin Change",
        321: "Create Maximum Number",
        320: "Generalized Abbreviation",
        319: "Next Greater Element II",
        318: "Maximum Product of Word Lengths",
        317: "Shortest Distance from All Buildings",
        316: "Remove Duplicate Letters",
        315: "Count of Smaller Numbers After Self",
        314: "Binary Tree Vertical Order Traversal",
        313: "Super Ugly Number",
        312: "Burst Balloons",
        311: "Sparse Matrix Multiplication",
        310: "Minimum Height Trees",
        309: "Best Time to Buy and Sell Stock with Cooldown",
        308: "Range Sum Query 2D - Mutable",
        307: "Range Sum Query - Mutable",
        306: "Additive Number",
        305: "Number of Islands II",
        304: "Range Sum Query 2D - Immutable",
        303: "Range Sum Query - Immutable",
        302: "Smallest Rectangle Enclosing Black Pixels",
        301: "Remove Invalid Parentheses",
        300: "Longest Increasing Subsequence",
        299: "Bulls and Cows",
        298: "Binary Tree Longest Consecutive Sequence",
        297: "Serialize and Deserialize Binary Tree",
        296: "Best Meeting Point",
        295: "Find Median from Data Stream",
        294: "Flip Game II",
        293: "Flip Game",
        292: "Nim Game",
        291: "Word Pattern II",
        290: "Word Pattern",
        289: "Game of Life",
        288: "Unique Word Abbreviation",
        287: "Find the Duplicate Number",
        286: "Walls and Gates",
        285: "Inorder Successor in BST",
        284: "Peeking Iterator",
        283: "Move Zeroes",
        282: "Expression Add Operators",
        281: "Zigzag Iterator",
        280: "Wiggle Sort",
        279: "Perfect Squares",
        278: "First Bad Version",
        277: "Find the Celebrity",
        276: "Paint Fence",
        275: "H-Index II",
        274: "H-Index",
        273: "Integer to English Words",
        272: "Closest Binary Search Tree Value II",
        271: "Encode and Decode Strings",
        270: "Closest Binary Search Tree Value",
        269: "Alien Dictionary",
        268: "Missing Number",
        267: "Palindrome Permutation II",
        266: "Palindrome Permutation",
        265: "Palindrome Partitioning II",
        264: "Ugly Number II",
        263: "Ugly Number",
        262: "Trips and Travel",
        261: "Graph Valid Tree",
        260: "Single Number III",
        259: "3Sum Smaller",
        258: "Add Digits",
        257: "Binary Tree Paths",
        256: "Paint House",
        255: "Verify Preorder Sequence in Binary Search Tree",
        254: "Factor Combinations",
        253: "Meeting Rooms II",
        252: "Meeting Rooms",
        251: "Flatten 2D Vector",
        250: "Count Univalue Subtrees",
        249: "Group Shifted Strings",
        248: "Strobogrammatic Number II",
        247: "Strobogrammatic Number",
        246: "Strobogrammatic Number II",
        245: "Shortest Word Distance III",
        244: "Shortest Word Distance II",
        243: "Shortest Word Distance",
        242: "Valid Anagram",
        241: "Different Ways to Add Parentheses",
        240: "Search a 2D Matrix II",
        239: "Sliding Window Maximum",
        238: "Product of Array Except Self",
        237: "Delete Node in a Linked List",
        236: "Lowest Common Ancestor of a Binary Tree",
        235: "Lowest Common Ancestor of a Binary Search Tree",
        234: "Palindrome Linked List",
        233: "Number of Digit One",
        232: "Implement Queue using Stacks",
        231: "Power of Two",
        230: "Kth Smallest Element in a BST",
        229: "Majority Element II",
        228: "Summary Ranges",
        227: "Basic Calculator II",
        226: "Invert Binary Tree",
        225: "Implement Stack using Queues",
        224: "Basic Calculator",
        223: "Rectangle Area",
        222: "Count Complete Tree Nodes",
        221: "Maximal Square",
        220: "Contains Duplicate III",
        219: "Contains Duplicate II",
        218: "The Skyline Problem",
        217: "Contains Duplicate",
        216: "Combination Sum III",
        215: "Kth Largest Element in an Array",
        214: "Shortest Palindrome",
        213: "House Robber II",
        212: "Word Search II",
        211: "Add and Search Word - Data structure design",
        210: "Course Schedule II",
        209: "Minimum Size Subarray Sum",
        208: "Implement Trie (Prefix Tree)",
        207: "Course Schedule",
        206: "Reverse Linked List",
        205: "Isomorphic Strings",
        204: "Count Primes",
        203: "Remove Linked List Elements",
        202: "Happy Number",
        201: "Bitwise AND of Numbers Range",
        200: "Number of Islands",
        199: "Binary Tree Right Side View",
        198: "House Robber",
        197: "Rise of the Machines",
        196: "Delete Duplicate Emails",
        195: "Tenth Line",
        194: "Transpose File",
        193: "Valid Phone Numbers",
        192: "Word Frequency",
        191: "Number of 1 Bits",
        190: "Reverse Bits",
        189: "Rotate Array",
        188: "Best Time to Buy and Sell Stock IV",
        187: "Repeated DNA Sequences",
        186: "Reverse Words in a String II",
        185: "Department Top Three Salaries",
        184: "Department Highest Salary",
        183: "Employees Earning More Than Their Managers",
        182: "Duplicate Emails",
        181: "Employees Earning More Than Their Managers",
        180: "Consecutive Numbers",
        179: "Largest Number",
        178: "Rank Scores",
        177: "Nth Highest Salary",
        176: "Second Highest Salary",
        175: "Combine Two Tables",
        174: "Dungeon Game",
        173: "Binary Search Tree Iterator",
        172: "Factorial Trailing Zeroes",
        171: "Excel Sheet Column Number",
        170: "Two Sum III - Data structure design",
        169: "Majority Element",
        168: "Excel Sheet Column Title",
        167: "Two Sum II - Input Array Is Sorted",
        166: "Fraction to Recurring Decimal",
        165: "Compare Version Numbers",
        164: "Maximum Gap",
        163: "Missing Ranges",
        162: "Find Peak Element",
        161: "One Edit Distance",
        160: "Intersection of Two Linked Lists",
        159: "Longest Substring with At Most Two Distinct Characters",
        158: "Read N Characters Given Read4 II - Call multiple times",
        157: "Read N Characters Given Read4",
        156: "Binary Tree Upside Down",
        155: "Min Stack",
        154: "Find Minimum in Rotated Sorted Array II",
        153: "Find Minimum in Rotated Sorted Array",
        152: "Maximum Product Subarray",
        151: "Reverse Words in a String",
        150: "Evaluate Reverse Polish Notation",
        149: "Max Points on a Line",
        148: "Sort List",
        147: "Insertion Sort List",
        146: "LRU Cache",
        145: "Binary Tree Postorder Traversal",
        144: "Binary Tree Preorder Traversal",
        143: "Reorder List",
        142: "Linked List Cycle II",
        141: "Linked List Cycle",
        140: "Word Break II",
        139: "Word Break",
        138: "Copy List with Random Pointer",
        137: "Single Number II",
        136: "Single Number",
        135: "Candy",
        134: "Gas Station",
        133: "Clone Graph",
        132: "Palindrome Partitioning II",
        131: "Palindrome Partitioning",
        130: "Surrounded Regions",
        129: "Sum Root to Leaf Numbers",
        128: "Longest Consecutive Sequence",
        127: "Word Ladder II",
        126: "Word Ladder",
        125: "Valid Palindrome II",
        124: "Binary Tree Maximum Path Sum",
        123: "Best Time to Buy and Sell Stock III",
        122: "Best Time to Buy and Sell Stock II",
        121: "Best Time to Buy and Sell Stock",
        120: "Triangle",
        119: "Pascal's Triangle II",
        118: "Pascal's Triangle",
        117: "Populating Next Right Pointers in Each Node II",
        116: "Populating Next Right Pointers in Each Node",
        115: "Distinct Subsequences",
        114: "Flatten Binary Tree to Linked List",
        113: "Path Sum II",
        112: "Path Sum",
        111: "Minimum Depth of Binary Tree",
        110: "Balanced Binary Tree",
        109: "Convert Sorted List to Binary Search Tree",
        108: "Convert Sorted Array to Binary Search Tree",
        107: "Binary Tree Level Order Traversal II",
        106: "Construct Binary Tree from Inorder and Postorder Traversal",
        105: "Construct Binary Tree from Preorder and Inorder Traversal",
        104: "Maximum Depth of Binary Tree",
        103: "Binary Tree Zigzag Level Order Traversal",
        102: "Binary Tree Level Order Traversal",
        101: "Symmetric Tree",
        100: "Same Tree",
        99: "Recover Binary Search Tree",
        98: "Validate Binary Search Tree",
        97: "Interleaving String",
        96: "Unique Binary Search Trees",
        95: "Unique Binary Search Trees II",
        94: "Binary Tree Inorder Traversal",
        93: "Restore IP Addresses",
        92: "Reverse Linked List II",
        91: "Decode Ways",
        90: "Subsets II",
        89: "Gray Code",
        88: "Merge Sorted Array",
        87: "Scramble String",
        86: "Partition List",
        85: "Maximal Rectangle",
        84: "Largest Rectangle in Histogram",
        83: "Remove Duplicates from Sorted List",
        82: "Remove Duplicates from Sorted List II",
        81: "Search in Rotated Sorted Array II",
        80: "Remove Duplicates from Sorted Array II",
        79: "Word Search",
        78: "Subsets",
        77: "Combinations",
        76: "Minimum Window Substring",
        75: "Sort Colors",
        74: "Search a 2D Matrix",
        73: "Set Matrix Zeroes",
        72: "Edit Distance",
        71: "Simplify Path",
        70: "Climbing Stairs",
        69: "Sqrt(x)",
        68: "Text Justification",
        67: "Add Binary",
        66: "Plus One",
        65: "Valid Number",
        64: "Minimum Path Sum",
        63: "Unique Paths II",
        62: "Unique Paths",
        61: "Rotate List",
        60: "Permutation Sequence",
        59: "Spiral Matrix II",
        58: "Length of Last Word",
        57: "Insert Interval",
        56: "Merge Intervals",
        55: "Jump Game",
        54: "Spiral Matrix",
        53: "Maximum Subarray",
        52: "N-Queens II",
        51: "N-Queens",
        50: "Pow(x, n)",
        49: "Group Anagrams",
        48: "Rotate Image",
        47: "Permutations II",
        46: "Permutations",
        45: "Jump Game II",
        44: "Wildcard Matching",
        43: "Multiply Strings",
        42: "Trapping Rain Water",
        41: "First Missing Positive",
        40: "Combination Sum II",
        39: "Combination Sum",
        38: "Count and Say",
        37: "Sudoku Solver",
        36: "Valid Sudoku",
        35: "Search Insert Position",
        34: "Search for a Range",
        33: "Search in Rotated Sorted Array",
        32: "Longest Valid Parentheses",
        31: "Next Permutation",
        30: "Substring with Concatenation of All Words",
        29: "Divide Two Integers",
        28: "Implement strStr()",
        27: "Remove Element",
        26: "Remove Duplicates from Sorted Array",
        25: "Reverse Nodes in k-Group",
        24: "Swap Nodes in Pairs",
        23: "Merge k Sorted Lists",
        22: "Generate Parentheses",
        21: "Merge Two Sorted Lists",
        20: "Valid Parentheses",
        19: "Remove Nth Node From End of List",
        18: "4Sum",
        17: "Letter Combinations of a Phone Number",
        16: "3Sum Closest",
        15: "3Sum",
        14: "Longest Common Prefix",
        13: "Roman to Integer",
        12: "Integer to Roman",
        11: "Container With Most Water",
        10: "Regular Expression Matching",
        9: "Palindrome Number",
        8: "String to Integer (atoi)",
        7: "Reverse Integer",
        6: "ZigZag Conversion",
        5: "Longest Palindromic Substring",
        4: "Median of Two Sorted Arrays",
        3: "Longest Substring Without Repeating Characters",
        2: "Add Two Numbers",
        1: "Two Sum"
  };

  let selectedLanguage = 'cpp'; 

  $('#languageSelect').change(function() {
    selectedLanguage = $(this).val();
    console.log(`Language changed to: ${selectedLanguage}`);
  });

  $('#searchbutton').click(function() {
    const input = $('#searchinput').val().trim();
    const solutionContainer = $('#solutioncontainer');
    const problemTitle = $('#problemtitle');

    if (!input) {
        solutionContainer.html("Please enter a question number or name.");
        return;
    }

    let questionInput = input;

    if (!isNaN(input)) {
        questionInput = questionMapping[input];
        if (!questionInput) {
            solutionContainer.html("Invalid question number.");
            return;
        }
    } else {
        questionInput = normalizeInputToCamelCase(input);
    }

    console.log(`Normalized input: ${questionInput}`);

    const pathsToTry = getPathsToTry(questionInput, selectedLanguage);

    console.log("Paths to try:");
    pathsToTry.forEach(path => console.log(path));

    tryPaths(pathsToTry, questionInput, solutionContainer, problemTitle);
  });

  function normalizeInputToCamelCase(input) {
    return input
        .trim()
        .replace(/\s+(.)/g, (match, group1) => group1.toUpperCase()) 
        .replace(/\s+/g, '') 
        .replace(/^(.)/, (match, group1) => group1.toLowerCase());
  }

  function normalizeToPascalCase(input) {
    return input
        .trim()
        .replace(/\s+(.)/g, (match, group1) => group1.toUpperCase())
        .replace(/\s+/g, '') 
        .replace(/^(.)/, (match, group1) => group1.toUpperCase());
  }
  function getPathsToTry(questionInput, language) {
    const fileExtensionMapping = {
      cpp: '.cpp',
      python: '.py',
      java: '.java',
      go: '.go'
    };

    const fileExtension = fileExtensionMapping[language];

    if (language === 'java') {
      return [
        `algorithms/java/src/${normalizeInputToCamelCase(questionInput)}/${normalizeToPascalCase(questionInput)}${fileExtension}`,
        `algorithms/java/src/${normalizeToPascalCase(questionInput)}/${normalizeToPascalCase(questionInput)}${fileExtension}`,
        `algorithms/java/src/${normalizeInputToCamelCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}`,  
        `algorithms/java/src/${normalizeToPascalCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}`,  
        `algorithms/java/src/${normalizeInputToCamelCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}` 
      ];
    }
    
    
    if (language === 'go') {
      return [
        `algorithms/golang/${normalizeInputToCamelCase(questionInput)}/${normalizeToPascalCase(questionInput)}${fileExtension}`,
        `algorithms/golang/${normalizeToPascalCase(questionInput)}/${normalizeToPascalCase(questionInput)}${fileExtension}`,
        `algorithms/golang/${normalizeInputToCamelCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}`, 
        `algorithms/golang/${normalizeToPascalCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}`,  
        `algorithms/golang/${normalizeInputToCamelCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}` 
      ];
    }

    return [
      `algorithms/${language}/${normalizeInputToCamelCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}`,
      `algorithms/${language}/${normalizeToPascalCase(questionInput)}/${normalizeToPascalCase(questionInput)}${fileExtension}`,
      `algorithms/${language}/${normalizeInputToCamelCase(questionInput)}/${normalizeToPascalCase(questionInput)}${fileExtension}`,
      `algorithms/${language}/${normalizeToPascalCase(questionInput)}/${normalizeInputToCamelCase(questionInput)}${fileExtension}`
    ];
  }
  function tryPaths(paths, questionInput, solutionContainer, problemTitle) {
    let index = 0;
    function tryNextPath() {
      if (index >= paths.length) {
          solutionContainer.html("Solution not found or incorrect file path.");
          return;
      }

      const path = paths[index];
      console.log(`Trying path: ${path}`);

      $.get(`https://raw.githubusercontent.com/haoel/leetcode/master/${path}`)
        .done(function(solution) {
            problemTitle.text(questionInput);
            solutionContainer.html(`<pre>${solution}</pre>`);
        })
        .fail(function(jqXHR, textStatus, errorThrown) {
            console.log(`Failed to load path: ${path}`);
            console.log(`Error: ${errorThrown}`);
            console.log(`Status: ${textStatus}`);
            index++;
            if (index < paths.length) {
                tryNextPath();
            } else {
                solutionContainer.html("Select another language. The solution for this question is not available in this language.");
            }
        });
    }

    tryNextPath();
  }
});
